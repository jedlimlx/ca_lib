[{"name":"ANTICLOCKWISE()","description":"simulation.Rotation.ANTICLOCKWISE","location":"ca_lib/simulation/-rotation/-a-n-t-i-c-l-o-c-k-w-i-s-e/index.html","searchKeys":["ANTICLOCKWISE","ANTICLOCKWISE()","simulation.Rotation.ANTICLOCKWISE"]},{"name":"CLOCKWISE()","description":"simulation.Rotation.CLOCKWISE","location":"ca_lib/simulation/-rotation/-c-l-o-c-k-w-i-s-e/index.html","searchKeys":["CLOCKWISE","CLOCKWISE()","simulation.Rotation.CLOCKWISE"]},{"name":"HORIZONTAL()","description":"simulation.Flip.HORIZONTAL","location":"ca_lib/simulation/-flip/-h-o-r-i-z-o-n-t-a-l/index.html","searchKeys":["HORIZONTAL","HORIZONTAL()","simulation.Flip.HORIZONTAL"]},{"name":"VERTICAL()","description":"simulation.Flip.VERTICAL","location":"ca_lib/simulation/-flip/-v-e-r-t-i-c-a-l/index.html","searchKeys":["VERTICAL","VERTICAL()","simulation.Flip.VERTICAL"]},{"name":"abstract class BaseHROT : RuleFamily","description":"rules.hrot.BaseHROT","location":"ca_lib/rules.hrot/-base-h-r-o-t/index.html","searchKeys":["BaseHROT","abstract class BaseHROT : RuleFamily","rules.hrot.BaseHROT"]},{"name":"abstract class Directive(name: String)","description":"rules.ruleloader.Directive","location":"ca_lib/rules.ruleloader/-directive/index.html","searchKeys":["Directive","abstract class Directive(name: String)","rules.ruleloader.Directive"]},{"name":"abstract class Grid : MutableIterable<Pair<Coordinate, Int>> ","description":"simulation.Grid","location":"ca_lib/simulation/-grid/index.html","searchKeys":["Grid","abstract class Grid : MutableIterable<Pair<Coordinate, Int>> ","simulation.Grid"]},{"name":"abstract class Pattern","description":"patterns.Pattern","location":"ca_lib/patterns/-pattern/index.html","searchKeys":["Pattern","abstract class Pattern","patterns.Pattern"]},{"name":"abstract class Rule","description":"rules.Rule","location":"ca_lib/rules/-rule/index.html","searchKeys":["Rule","abstract class Rule","rules.Rule"]},{"name":"abstract class RuleDirective(name: String) : Directive","description":"rules.ruleloader.RuleDirective","location":"ca_lib/rules.ruleloader/-rule-directive/index.html","searchKeys":["RuleDirective","abstract class RuleDirective(name: String) : Directive","rules.ruleloader.RuleDirective"]},{"name":"abstract class RuleFamily : Rule","description":"rules.RuleFamily","location":"ca_lib/rules/-rule-family/index.html","searchKeys":["RuleFamily","abstract class RuleFamily : Rule","rules.RuleFamily"]},{"name":"abstract class Symmetry","description":"rules.ruleloader.ruletable.Symmetry","location":"ca_lib/rules.ruleloader.ruletable/-symmetry/index.html","searchKeys":["Symmetry","abstract class Symmetry","rules.ruleloader.ruletable.Symmetry"]},{"name":"abstract fun <T> applySymmetry(neighbours: List<T>): Set<List<T>>","description":"rules.ruleloader.ruletable.Symmetry.applySymmetry","location":"ca_lib/rules.ruleloader.ruletable/-symmetry/apply-symmetry.html","searchKeys":["applySymmetry","abstract fun <T> applySymmetry(neighbours: List<T>): Set<List<T>>","rules.ruleloader.ruletable.Symmetry.applySymmetry"]},{"name":"abstract fun deepCopy(): Grid","description":"simulation.Grid.deepCopy","location":"ca_lib/simulation/-grid/deep-copy.html","searchKeys":["deepCopy","abstract fun deepCopy(): Grid","simulation.Grid.deepCopy"]},{"name":"abstract fun export(): String","description":"rules.ruleloader.Directive.export","location":"ca_lib/rules.ruleloader/-directive/export.html","searchKeys":["export","abstract fun export(): String","rules.ruleloader.Directive.export"]},{"name":"abstract fun generateRuletable(): Ruletable","description":"rules.RuleFamily.generateRuletable","location":"ca_lib/rules/-rule-family/generate-ruletable.html","searchKeys":["generateRuletable","abstract fun generateRuletable(): Ruletable","rules.RuleFamily.generateRuletable"]},{"name":"abstract fun transitionFunc(cells: IntArray, cellState: Int, generation: Int, coordinate: Coordinate): Int","description":"rules.Rule.transitionFunc","location":"ca_lib/rules/-rule/transition-func.html","searchKeys":["transitionFunc","abstract fun transitionFunc(cells: IntArray, cellState: Int, generation: Int, coordinate: Coordinate): Int","rules.Rule.transitionFunc"]},{"name":"abstract operator fun get(coordinate: Coordinate, withoutBg: Boolean = false): Int","description":"simulation.Grid.get","location":"ca_lib/simulation/-grid/get.html","searchKeys":["get","abstract operator fun get(coordinate: Coordinate, withoutBg: Boolean = false): Int","simulation.Grid.get"]},{"name":"abstract operator fun set(coordinate: Coordinate, state: Int)","description":"simulation.Grid.set","location":"ca_lib/simulation/-grid/set.html","searchKeys":["set","abstract operator fun set(coordinate: Coordinate, state: Int)","simulation.Grid.set"]},{"name":"abstract val information: Map<String, String>","description":"patterns.Pattern.information","location":"ca_lib/patterns/-pattern/information.html","searchKeys":["information","abstract val information: Map<String, String>","patterns.Pattern.information"]},{"name":"abstract val neighbourhood: Array<Array<Coordinate>>","description":"rules.Rule.neighbourhood","location":"ca_lib/rules/-rule/neighbourhood.html","searchKeys":["neighbourhood","abstract val neighbourhood: Array<Array<Coordinate>>","rules.Rule.neighbourhood"]},{"name":"abstract val population: Int","description":"simulation.Grid.population","location":"ca_lib/simulation/-grid/population.html","searchKeys":["population","abstract val population: Int","simulation.Grid.population"]},{"name":"abstract val populationByState: IntArray","description":"simulation.Grid.populationByState","location":"ca_lib/simulation/-grid/population-by-state.html","searchKeys":["populationByState","abstract val populationByState: IntArray","simulation.Grid.populationByState"]},{"name":"abstract val possibleSuccessors: Array<Array<IntArray>>","description":"rules.Rule.possibleSuccessors","location":"ca_lib/rules/-rule/possible-successors.html","searchKeys":["possibleSuccessors","abstract val possibleSuccessors: Array<Array<IntArray>>","rules.Rule.possibleSuccessors"]},{"name":"abstract val regex: List<Regex>","description":"rules.RuleFamily.regex","location":"ca_lib/rules/-rule-family/regex.html","searchKeys":["regex","abstract val regex: List<Regex>","rules.RuleFamily.regex"]},{"name":"abstract val weights: IntArray?","description":"rules.hrot.BaseHROT.weights","location":"ca_lib/rules.hrot/-base-h-r-o-t/weights.html","searchKeys":["weights","abstract val weights: IntArray?","rules.hrot.BaseHROT.weights"]},{"name":"annotation class DirectiveMarker","description":"rules.ruleloader.builders.DirectiveMarker","location":"ca_lib/rules.ruleloader.builders/-directive-marker/index.html","searchKeys":["DirectiveMarker","annotation class DirectiveMarker","rules.ruleloader.builders.DirectiveMarker"]},{"name":"annotation class TableDirectiveMarker","description":"rules.ruleloader.builders.TableDirectiveMarker","location":"ca_lib/rules.ruleloader.builders/-table-directive-marker/index.html","searchKeys":["TableDirectiveMarker","annotation class TableDirectiveMarker","rules.ruleloader.builders.TableDirectiveMarker"]},{"name":"class Coordinate(x: Int, y: Int)","description":"simulation.Coordinate","location":"ca_lib/simulation/-coordinate/index.html","searchKeys":["Coordinate","class Coordinate(x: Int, y: Int)","simulation.Coordinate"]},{"name":"class DenseGrid(pattern: String, rule: Rule, initialWidth: Int, initialHeight: Int, startingCoordinate: Coordinate, expansion_factor: Double) : Grid","description":"simulation.DenseGrid","location":"ca_lib/simulation/-dense-grid/index.html","searchKeys":["DenseGrid","class DenseGrid(pattern: String, rule: Rule, initialWidth: Int, initialHeight: Int, startingCoordinate: Coordinate, expansion_factor: Double) : Grid","simulation.DenseGrid"]},{"name":"class DisjointCyclesSymmetry : Symmetry","description":"rules.ruleloader.ruletable.DisjointCyclesSymmetry","location":"ca_lib/rules.ruleloader.ruletable/-disjoint-cycles-symmetry/index.html","searchKeys":["DisjointCyclesSymmetry","class DisjointCyclesSymmetry : Symmetry","rules.ruleloader.ruletable.DisjointCyclesSymmetry"]},{"name":"class HROT : BaseHROT","description":"rules.hrot.HROT","location":"ca_lib/rules.hrot/-h-r-o-t/index.html","searchKeys":["HROT","class HROT : BaseHROT","rules.hrot.HROT"]},{"name":"class HROTGenerations : BaseHROT","description":"rules.hrot.HROTGenerations","location":"ca_lib/rules.hrot/-h-r-o-t-generations/index.html","searchKeys":["HROTGenerations","class HROTGenerations : BaseHROT","rules.hrot.HROTGenerations"]},{"name":"class Oscillator(period: Int, phases: Array<Grid>) : Spaceship","description":"patterns.Oscillator","location":"ca_lib/patterns/-oscillator/index.html","searchKeys":["Oscillator","class Oscillator(period: Int, phases: Array<Grid>) : Spaceship","patterns.Oscillator"]},{"name":"class OuterTotalisticBuilder(neighbourhood: Array<Coordinate>, weights: IntArray?)","description":"rules.ruleloader.builders.OuterTotalisticBuilder","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/index.html","searchKeys":["OuterTotalisticBuilder","class OuterTotalisticBuilder(neighbourhood: Array<Coordinate>, weights: IntArray?)","rules.ruleloader.builders.OuterTotalisticBuilder"]},{"name":"class PermuteSymmetry : Symmetry","description":"rules.ruleloader.ruletable.PermuteSymmetry","location":"ca_lib/rules.ruleloader.ruletable/-permute-symmetry/index.html","searchKeys":["PermuteSymmetry","class PermuteSymmetry : Symmetry","rules.ruleloader.ruletable.PermuteSymmetry"]},{"name":"class Ruletable(name: String, directive: List<Directive>, ruleDirectives: List<RuleDirective>)","description":"rules.ruleloader.Ruletable","location":"ca_lib/rules.ruleloader/-ruletable/index.html","searchKeys":["Ruletable","class Ruletable(name: String, directive: List<Directive>, ruleDirectives: List<RuleDirective>)","rules.ruleloader.Ruletable"]},{"name":"class RuletableBuilder","description":"rules.ruleloader.builders.RuletableBuilder","location":"ca_lib/rules.ruleloader.builders/-ruletable-builder/index.html","searchKeys":["RuletableBuilder","class RuletableBuilder","rules.ruleloader.builders.RuletableBuilder"]},{"name":"class RuletableDirective(numStates: Int, neighbourhood: Array<Coordinate>) : RuleDirective","description":"rules.ruleloader.ruletable.RuletableDirective","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/index.html","searchKeys":["RuletableDirective","class RuletableDirective(numStates: Int, neighbourhood: Array<Coordinate>) : RuleDirective","rules.ruleloader.ruletable.RuletableDirective"]},{"name":"class RuletableDirectiveBuilder(numStates: Int, neighbourhood: Array<Coordinate>, symmetry: Symmetry?)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/index.html","searchKeys":["RuletableDirectiveBuilder","class RuletableDirectiveBuilder(numStates: Int, neighbourhood: Array<Coordinate>, symmetry: Symmetry?)","rules.ruleloader.builders.RuletableDirectiveBuilder"]},{"name":"class SparseGrid(pattern: String, rule: Rule) : Grid","description":"simulation.SparseGrid","location":"ca_lib/simulation/-sparse-grid/index.html","searchKeys":["SparseGrid","class SparseGrid(pattern: String, rule: Rule) : Grid","simulation.SparseGrid"]},{"name":"class Utils","description":".Utils","location":"ca_lib/[root]/-utils/index.html","searchKeys":["Utils","class Utils",".Utils"]},{"name":"const val NEIGHBOURHOOD_SYMBOLS: String","description":".NEIGHBOURHOOD_SYMBOLS","location":"ca_lib/[root]/-n-e-i-g-h-b-o-u-r-h-o-o-d_-s-y-m-b-o-l-s.html","searchKeys":["NEIGHBOURHOOD_SYMBOLS","const val NEIGHBOURHOOD_SYMBOLS: String",".NEIGHBOURHOOD_SYMBOLS"]},{"name":"const val neighbourhoodRegex: String","description":"rules.hrot.BaseHROT.Companion.neighbourhoodRegex","location":"ca_lib/rules.hrot/-base-h-r-o-t/-companion/neighbourhood-regex.html","searchKeys":["neighbourhoodRegex","const val neighbourhoodRegex: String","rules.hrot.BaseHROT.Companion.neighbourhoodRegex"]},{"name":"const val transitionRegex: String","description":"rules.hrot.BaseHROT.Companion.transitionRegex","location":"ca_lib/rules.hrot/-base-h-r-o-t/-companion/transition-regex.html","searchKeys":["transitionRegex","const val transitionRegex: String","rules.hrot.BaseHROT.Companion.transitionRegex"]},{"name":"data class Transition(values: Map<Int, Int>, variables: Map<Int, Variable>)","description":"rules.ruleloader.ruletable.Transition","location":"ca_lib/rules.ruleloader.ruletable/-transition/index.html","searchKeys":["Transition","data class Transition(values: Map<Int, Int>, variables: Map<Int, Variable>)","rules.ruleloader.ruletable.Transition"]},{"name":"data class Variable(name: String, values: Set<Int>, unbounded: Boolean)","description":"rules.ruleloader.ruletable.Variable","location":"ca_lib/rules.ruleloader.ruletable/-variable/index.html","searchKeys":["Variable","data class Variable(name: String, values: Set<Int>, unbounded: Boolean)","rules.ruleloader.ruletable.Variable"]},{"name":"enum Flip : Enum<Flip> ","description":"simulation.Flip","location":"ca_lib/simulation/-flip/index.html","searchKeys":["Flip","enum Flip : Enum<Flip> ","simulation.Flip"]},{"name":"enum Rotation : Enum<Rotation> ","description":"simulation.Rotation","location":"ca_lib/simulation/-rotation/index.html","searchKeys":["Rotation","enum Rotation : Enum<Rotation> ","simulation.Rotation"]},{"name":"expect fun readResource(resource: String): String","description":".readResource","location":"ca_lib/[root]/read-resource.html","searchKeys":["readResource","expect fun readResource(resource: String): String",".readResource"]},{"name":"fun BaseHROT()","description":"rules.hrot.BaseHROT.BaseHROT","location":"ca_lib/rules.hrot/-base-h-r-o-t/-base-h-r-o-t.html","searchKeys":["BaseHROT","fun BaseHROT()","rules.hrot.BaseHROT.BaseHROT"]},{"name":"fun Coordinate(x: Int = 0, y: Int = 0)","description":"simulation.Coordinate.Coordinate","location":"ca_lib/simulation/-coordinate/-coordinate.html","searchKeys":["Coordinate","fun Coordinate(x: Int = 0, y: Int = 0)","simulation.Coordinate.Coordinate"]},{"name":"fun DenseGrid(pattern: String = \"\", rule: Rule = PLACEHOLDER_RULE, initialWidth: Int = 16, initialHeight: Int = 16, startingCoordinate: Coordinate = Coordinate(), expansion_factor: Double = 1.1)","description":"simulation.DenseGrid.DenseGrid","location":"ca_lib/simulation/-dense-grid/-dense-grid.html","searchKeys":["DenseGrid","fun DenseGrid(pattern: String = \"\", rule: Rule = PLACEHOLDER_RULE, initialWidth: Int = 16, initialHeight: Int = 16, startingCoordinate: Coordinate = Coordinate(), expansion_factor: Double = 1.1)","simulation.DenseGrid.DenseGrid"]},{"name":"fun Directive(name: String)","description":"rules.ruleloader.Directive.Directive","location":"ca_lib/rules.ruleloader/-directive/-directive.html","searchKeys":["Directive","fun Directive(name: String)","rules.ruleloader.Directive.Directive"]},{"name":"fun DirectiveMarker()","description":"rules.ruleloader.builders.DirectiveMarker.DirectiveMarker","location":"ca_lib/rules.ruleloader.builders/-directive-marker/-directive-marker.html","searchKeys":["DirectiveMarker","fun DirectiveMarker()","rules.ruleloader.builders.DirectiveMarker.DirectiveMarker"]},{"name":"fun DisjointCyclesSymmetry(disjointCycles: Array<Array<IntArray>>)","description":"rules.ruleloader.ruletable.DisjointCyclesSymmetry.DisjointCyclesSymmetry","location":"ca_lib/rules.ruleloader.ruletable/-disjoint-cycles-symmetry/-disjoint-cycles-symmetry.html","searchKeys":["DisjointCyclesSymmetry","fun DisjointCyclesSymmetry(disjointCycles: Array<Array<IntArray>>)","rules.ruleloader.ruletable.DisjointCyclesSymmetry.DisjointCyclesSymmetry"]},{"name":"fun DisjointCyclesSymmetry(symmetry: String)","description":"rules.ruleloader.ruletable.DisjointCyclesSymmetry.DisjointCyclesSymmetry","location":"ca_lib/rules.ruleloader.ruletable/-disjoint-cycles-symmetry/-disjoint-cycles-symmetry.html","searchKeys":["DisjointCyclesSymmetry","fun DisjointCyclesSymmetry(symmetry: String)","rules.ruleloader.ruletable.DisjointCyclesSymmetry.DisjointCyclesSymmetry"]},{"name":"fun Grid()","description":"simulation.Grid.Grid","location":"ca_lib/simulation/-grid/-grid.html","searchKeys":["Grid","fun Grid()","simulation.Grid.Grid"]},{"name":"fun HROT(birth: Iterable<Int>, survival: Iterable<Int>, neighbourhood: Array<Coordinate> = moore(1), weights: IntArray? = null)","description":"rules.hrot.HROT.HROT","location":"ca_lib/rules.hrot/-h-r-o-t/-h-r-o-t.html","searchKeys":["HROT","fun HROT(birth: Iterable<Int>, survival: Iterable<Int>, neighbourhood: Array<Coordinate> = moore(1), weights: IntArray? = null)","rules.hrot.HROT.HROT"]},{"name":"fun HROT(rulestring: String = \"B3/S23\")","description":"rules.hrot.HROT.HROT","location":"ca_lib/rules.hrot/-h-r-o-t/-h-r-o-t.html","searchKeys":["HROT","fun HROT(rulestring: String = \"B3/S23\")","rules.hrot.HROT.HROT"]},{"name":"fun HROTGenerations(birth: Iterable<Int>, survival: Iterable<Int>, numStates: Int, neighbourhood: Array<Coordinate> = moore(1), weights: IntArray? = null)","description":"rules.hrot.HROTGenerations.HROTGenerations","location":"ca_lib/rules.hrot/-h-r-o-t-generations/-h-r-o-t-generations.html","searchKeys":["HROTGenerations","fun HROTGenerations(birth: Iterable<Int>, survival: Iterable<Int>, numStates: Int, neighbourhood: Array<Coordinate> = moore(1), weights: IntArray? = null)","rules.hrot.HROTGenerations.HROTGenerations"]},{"name":"fun HROTGenerations(rulestring: String = \"12/34/3\")","description":"rules.hrot.HROTGenerations.HROTGenerations","location":"ca_lib/rules.hrot/-h-r-o-t-generations/-h-r-o-t-generations.html","searchKeys":["HROTGenerations","fun HROTGenerations(rulestring: String = \"12/34/3\")","rules.hrot.HROTGenerations.HROTGenerations"]},{"name":"fun Oscillator(period: Int, phase: Grid)","description":"patterns.Oscillator.Oscillator","location":"ca_lib/patterns/-oscillator/-oscillator.html","searchKeys":["Oscillator","fun Oscillator(period: Int, phase: Grid)","patterns.Oscillator.Oscillator"]},{"name":"fun Oscillator(period: Int, phases: Array<Grid>)","description":"patterns.Oscillator.Oscillator","location":"ca_lib/patterns/-oscillator/-oscillator.html","searchKeys":["Oscillator","fun Oscillator(period: Int, phases: Array<Grid>)","patterns.Oscillator.Oscillator"]},{"name":"fun OuterTotalisticBuilder(neighbourhood: Array<Coordinate>, weights: IntArray? = null)","description":"rules.ruleloader.builders.OuterTotalisticBuilder.OuterTotalisticBuilder","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/-outer-totalistic-builder.html","searchKeys":["OuterTotalisticBuilder","fun OuterTotalisticBuilder(neighbourhood: Array<Coordinate>, weights: IntArray? = null)","rules.ruleloader.builders.OuterTotalisticBuilder.OuterTotalisticBuilder"]},{"name":"fun Pattern()","description":"patterns.Pattern.Pattern","location":"ca_lib/patterns/-pattern/-pattern.html","searchKeys":["Pattern","fun Pattern()","patterns.Pattern.Pattern"]},{"name":"fun PermuteSymmetry()","description":"rules.ruleloader.ruletable.PermuteSymmetry.PermuteSymmetry","location":"ca_lib/rules.ruleloader.ruletable/-permute-symmetry/-permute-symmetry.html","searchKeys":["PermuteSymmetry","fun PermuteSymmetry()","rules.ruleloader.ruletable.PermuteSymmetry.PermuteSymmetry"]},{"name":"fun Rule()","description":"rules.Rule.Rule","location":"ca_lib/rules/-rule/-rule.html","searchKeys":["Rule","fun Rule()","rules.Rule.Rule"]},{"name":"fun RuleDirective(name: String)","description":"rules.ruleloader.RuleDirective.RuleDirective","location":"ca_lib/rules.ruleloader/-rule-directive/-rule-directive.html","searchKeys":["RuleDirective","fun RuleDirective(name: String)","rules.ruleloader.RuleDirective.RuleDirective"]},{"name":"fun RuleFamily()","description":"rules.RuleFamily.RuleFamily","location":"ca_lib/rules/-rule-family/-rule-family.html","searchKeys":["RuleFamily","fun RuleFamily()","rules.RuleFamily.RuleFamily"]},{"name":"fun Ruletable(name: String, directive: List<Directive>, ruleDirectives: List<RuleDirective>)","description":"rules.ruleloader.Ruletable.Ruletable","location":"ca_lib/rules.ruleloader/-ruletable/-ruletable.html","searchKeys":["Ruletable","fun Ruletable(name: String, directive: List<Directive>, ruleDirectives: List<RuleDirective>)","rules.ruleloader.Ruletable.Ruletable"]},{"name":"fun RuletableBuilder()","description":"rules.ruleloader.builders.RuletableBuilder.RuletableBuilder","location":"ca_lib/rules.ruleloader.builders/-ruletable-builder/-ruletable-builder.html","searchKeys":["RuletableBuilder","fun RuletableBuilder()","rules.ruleloader.builders.RuletableBuilder.RuletableBuilder"]},{"name":"fun RuletableDirective(numStates: Int = 2, neighbourhood: Array<Coordinate> = moore(1))","description":"rules.ruleloader.ruletable.RuletableDirective.RuletableDirective","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/-ruletable-directive.html","searchKeys":["RuletableDirective","fun RuletableDirective(numStates: Int = 2, neighbourhood: Array<Coordinate> = moore(1))","rules.ruleloader.ruletable.RuletableDirective.RuletableDirective"]},{"name":"fun RuletableDirectiveBuilder(numStates: Int = 2, neighbourhood: Array<Coordinate> = moore(1), symmetry: Symmetry? = null)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.RuletableDirectiveBuilder","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/-ruletable-directive-builder.html","searchKeys":["RuletableDirectiveBuilder","fun RuletableDirectiveBuilder(numStates: Int = 2, neighbourhood: Array<Coordinate> = moore(1), symmetry: Symmetry? = null)","rules.ruleloader.builders.RuletableDirectiveBuilder.RuletableDirectiveBuilder"]},{"name":"fun Spaceship(dx: Int, dy: Int, period: Int, phase: Grid)","description":"patterns.Spaceship.Spaceship","location":"ca_lib/patterns/-spaceship/-spaceship.html","searchKeys":["Spaceship","fun Spaceship(dx: Int, dy: Int, period: Int, phase: Grid)","patterns.Spaceship.Spaceship"]},{"name":"fun Spaceship(dx: Int, dy: Int, period: Int, phases: Array<Grid>)","description":"patterns.Spaceship.Spaceship","location":"ca_lib/patterns/-spaceship/-spaceship.html","searchKeys":["Spaceship","fun Spaceship(dx: Int, dy: Int, period: Int, phases: Array<Grid>)","patterns.Spaceship.Spaceship"]},{"name":"fun SparseGrid(pattern: String = \"\", rule: Rule = PLACEHOLDER_RULE)","description":"simulation.SparseGrid.SparseGrid","location":"ca_lib/simulation/-sparse-grid/-sparse-grid.html","searchKeys":["SparseGrid","fun SparseGrid(pattern: String = \"\", rule: Rule = PLACEHOLDER_RULE)","simulation.SparseGrid.SparseGrid"]},{"name":"fun Symmetry()","description":"rules.ruleloader.ruletable.Symmetry.Symmetry","location":"ca_lib/rules.ruleloader.ruletable/-symmetry/-symmetry.html","searchKeys":["Symmetry","fun Symmetry()","rules.ruleloader.ruletable.Symmetry.Symmetry"]},{"name":"fun TableDirectiveMarker()","description":"rules.ruleloader.builders.TableDirectiveMarker.TableDirectiveMarker","location":"ca_lib/rules.ruleloader.builders/-table-directive-marker/-table-directive-marker.html","searchKeys":["TableDirectiveMarker","fun TableDirectiveMarker()","rules.ruleloader.builders.TableDirectiveMarker.TableDirectiveMarker"]},{"name":"fun Transition(values: Map<Int, Int>, variables: Map<Int, Variable>)","description":"rules.ruleloader.ruletable.Transition.Transition","location":"ca_lib/rules.ruleloader.ruletable/-transition/-transition.html","searchKeys":["Transition","fun Transition(values: Map<Int, Int>, variables: Map<Int, Variable>)","rules.ruleloader.ruletable.Transition.Transition"]},{"name":"fun Utils()","description":".Utils.Utils","location":"ca_lib/[root]/-utils/-utils.html","searchKeys":["Utils","fun Utils()",".Utils.Utils"]},{"name":"fun Variable(name: String, values: Set<Int>, unbounded: Boolean = true)","description":"rules.ruleloader.ruletable.Variable.Variable","location":"ca_lib/rules.ruleloader.ruletable/-variable/-variable.html","searchKeys":["Variable","fun Variable(name: String, values: Set<Int>, unbounded: Boolean = true)","rules.ruleloader.ruletable.Variable.Variable"]},{"name":"fun addComment(comment: String)","description":"rules.ruleloader.ruletable.RuletableDirective.addComment","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/add-comment.html","searchKeys":["addComment","fun addComment(comment: String)","rules.ruleloader.ruletable.RuletableDirective.addComment"]},{"name":"fun addTransition(transition: Transition)","description":"rules.ruleloader.ruletable.RuletableDirective.addTransition","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/add-transition.html","searchKeys":["addTransition","fun addTransition(transition: Transition)","rules.ruleloader.ruletable.RuletableDirective.addTransition"]},{"name":"fun addVariable(variable: Variable)","description":"rules.ruleloader.ruletable.RuletableDirective.addVariable","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/add-variable.html","searchKeys":["addVariable","fun addVariable(variable: Variable)","rules.ruleloader.ruletable.RuletableDirective.addVariable"]},{"name":"fun asterisk(range: Int): Array<Coordinate>","description":".asterisk","location":"ca_lib/[root]/asterisk.html","searchKeys":["asterisk","fun asterisk(range: Int): Array<Coordinate>",".asterisk"]},{"name":"fun build(): ArrayList<List<String>>","description":"rules.ruleloader.builders.OuterTotalisticBuilder.build","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/build.html","searchKeys":["build","fun build(): ArrayList<List<String>>","rules.ruleloader.builders.OuterTotalisticBuilder.build"]},{"name":"fun build(): Ruletable","description":"rules.ruleloader.builders.RuletableBuilder.build","location":"ca_lib/rules.ruleloader.builders/-ruletable-builder/build.html","searchKeys":["build","fun build(): Ruletable","rules.ruleloader.builders.RuletableBuilder.build"]},{"name":"fun build(): RuletableDirective","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.build","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/build.html","searchKeys":["build","fun build(): RuletableDirective","rules.ruleloader.builders.RuletableDirectiveBuilder.build"]},{"name":"fun checkerboard(range: Int): Array<Coordinate>","description":".checkerboard","location":"ca_lib/[root]/checkerboard.html","searchKeys":["checkerboard","fun checkerboard(range: Int): Array<Coordinate>",".checkerboard"]},{"name":"fun circular(range: Int): Array<Coordinate>","description":".circular","location":"ca_lib/[root]/circular.html","searchKeys":["circular","fun circular(range: Int): Array<Coordinate>",".circular"]},{"name":"fun comment(comment: String)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.comment","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/comment.html","searchKeys":["comment","fun comment(comment: String)","rules.ruleloader.builders.RuletableDirectiveBuilder.comment"]},{"name":"fun convert(state: Int, bg: Int): Int","description":".Utils.Companion.convert","location":"ca_lib/[root]/-utils/-companion/convert.html","searchKeys":["convert","fun convert(state: Int, bg: Int): Int",".Utils.Companion.convert"]},{"name":"fun cross(range: Int): Array<Coordinate>","description":".cross","location":"ca_lib/[root]/cross.html","searchKeys":["cross","fun cross(range: Int): Array<Coordinate>",".cross"]},{"name":"fun enumerateC1(width: Int = 16, height: Int = 16, statesToInclude: IntArray = intArrayOf(0, 1)): Sequence<Grid>","description":"soup.enumerateC1","location":"ca_lib/soup/enumerate-c1.html","searchKeys":["enumerateC1","fun enumerateC1(width: Int = 16, height: Int = 16, statesToInclude: IntArray = intArrayOf(0, 1)): Sequence<Grid>","soup.enumerateC1"]},{"name":"fun enumerateD2(width: Int = 16, height: Int = 16, statesToInclude: IntArray = intArrayOf(0, 1), odd: Boolean = false): Sequence<Grid>","description":"soup.enumerateD2","location":"ca_lib/soup/enumerate-d2.html","searchKeys":["enumerateD2","fun enumerateD2(width: Int = 16, height: Int = 16, statesToInclude: IntArray = intArrayOf(0, 1), odd: Boolean = false): Sequence<Grid>","soup.enumerateD2"]},{"name":"fun enumerateD4(width: Int = 16, height: Int = 16, statesToInclude: IntArray = intArrayOf(0, 1), oddX: Boolean = false, oddY: Boolean = false): Sequence<Grid>","description":"soup.enumerateD4","location":"ca_lib/soup/enumerate-d4.html","searchKeys":["enumerateD4","fun enumerateD4(width: Int = 16, height: Int = 16, statesToInclude: IntArray = intArrayOf(0, 1), oddX: Boolean = false, oddY: Boolean = false): Sequence<Grid>","soup.enumerateD4"]},{"name":"fun enumerateRules(minRule: RuleFamily, maxRule: RuleFamily): Sequence<RuleFamily>","description":"rules.enumerateRules","location":"ca_lib/rules/enumerate-rules.html","searchKeys":["enumerateRules","fun enumerateRules(minRule: RuleFamily, maxRule: RuleFamily): Sequence<RuleFamily>","rules.enumerateRules"]},{"name":"fun enumerateSoup(width: Int, height: Int, statesToInclude: IntArray = intArrayOf(0, 1), cellsToPlace: (it: Coordinate) -> List<Coordinate>): Sequence<Grid>","description":"soup.enumerateSoup","location":"ca_lib/soup/enumerate-soup.html","searchKeys":["enumerateSoup","fun enumerateSoup(width: Int, height: Int, statesToInclude: IntArray = intArrayOf(0, 1), cellsToPlace: (it: Coordinate) -> List<Coordinate>): Sequence<Grid>","soup.enumerateSoup"]},{"name":"fun euclidean(range: Int): Array<Coordinate>","description":".euclidean","location":"ca_lib/[root]/euclidean.html","searchKeys":["euclidean","fun euclidean(range: Int): Array<Coordinate>",".euclidean"]},{"name":"fun export(): String","description":"rules.ruleloader.Ruletable.export","location":"ca_lib/rules.ruleloader/-ruletable/export.html","searchKeys":["export","fun export(): String","rules.ruleloader.Ruletable.export"]},{"name":"fun fromRulestring(rulestring: String): RuleFamily","description":"rules.fromRulestring","location":"ca_lib/rules/from-rulestring.html","searchKeys":["fromRulestring","fun fromRulestring(rulestring: String): RuleFamily","rules.fromRulestring"]},{"name":"fun gaussian(range: Int): Pair<Array<Coordinate>, IntArray>","description":".gaussian","location":"ca_lib/[root]/gaussian.html","searchKeys":["gaussian","fun gaussian(range: Int): Pair<Array<Coordinate>, IntArray>",".gaussian"]},{"name":"fun generateC1(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null): Grid","description":"soup.generateC1","location":"ca_lib/soup/generate-c1.html","searchKeys":["generateC1","fun generateC1(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null): Grid","soup.generateC1"]},{"name":"fun generateD2(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null, odd: Boolean = false): Grid","description":"soup.generateD2","location":"ca_lib/soup/generate-d2.html","searchKeys":["generateD2","fun generateD2(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null, odd: Boolean = false): Grid","soup.generateD2"]},{"name":"fun generateD4(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null, oddX: Boolean = false, oddY: Boolean = false): Grid","description":"soup.generateD4","location":"ca_lib/soup/generate-d4.html","searchKeys":["generateD4","fun generateD4(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null, oddX: Boolean = false, oddY: Boolean = false): Grid","soup.generateD4"]},{"name":"fun generateSoup(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null, cellsToPlace: (it: Coordinate) -> List<Coordinate>): Grid","description":"soup.generateSoup","location":"ca_lib/soup/generate-soup.html","searchKeys":["generateSoup","fun generateSoup(width: Int = 16, height: Int = 16, density: DoubleArray = doubleArrayOf(0.5, 0.5), seed: Int? = null, cellsToPlace: (it: Coordinate) -> List<Coordinate>): Grid","soup.generateSoup"]},{"name":"fun hash(range: Int): Array<Coordinate>","description":".hash","location":"ca_lib/[root]/hash.html","searchKeys":["hash","fun hash(range: Int): Array<Coordinate>",".hash"]},{"name":"fun hexagonal(range: Int): Array<Coordinate>","description":".hexagonal","location":"ca_lib/[root]/hexagonal.html","searchKeys":["hexagonal","fun hexagonal(range: Int): Array<Coordinate>",".hexagonal"]},{"name":"fun identifier(index: Int): String","description":"rules.ruleloader.ruletable.Variable.identifier","location":"ca_lib/rules.ruleloader.ruletable/-variable/identifier.html","searchKeys":["identifier","fun identifier(index: Int): String","rules.ruleloader.ruletable.Variable.identifier"]},{"name":"fun moore(range: Int): Array<Coordinate>","description":".moore","location":"ca_lib/[root]/moore.html","searchKeys":["moore","fun moore(range: Int): Array<Coordinate>",".moore"]},{"name":"fun outerTotalistic(init: OuterTotalisticBuilder.() -> Unit)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.outerTotalistic","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/outer-totalistic.html","searchKeys":["outerTotalistic","fun outerTotalistic(init: OuterTotalisticBuilder.() -> Unit)","rules.ruleloader.builders.RuletableDirectiveBuilder.outerTotalistic"]},{"name":"fun parseCoordCA(range: Int, string: String): Array<Coordinate>","description":".parseCoordCA","location":"ca_lib/[root]/parse-coord-c-a.html","searchKeys":["parseCoordCA","fun parseCoordCA(range: Int, string: String): Array<Coordinate>",".parseCoordCA"]},{"name":"fun parseSymbol(range: Int, symbol: Char): Pair<Array<Coordinate>, IntArray?>","description":".parseSymbol","location":"ca_lib/[root]/parse-symbol.html","searchKeys":["parseSymbol","fun parseSymbol(range: Int, symbol: Char): Pair<Array<Coordinate>, IntArray?>",".parseSymbol"]},{"name":"fun parseWeights(range: Int, string: String): Pair<Array<Coordinate>, IntArray>","description":".parseWeights","location":"ca_lib/[root]/parse-weights.html","searchKeys":["parseWeights","fun parseWeights(range: Int, string: String): Pair<Array<Coordinate>, IntArray>",".parseWeights"]},{"name":"fun randomRule(minRule: RuleFamily, maxRule: RuleFamily, seed: Int? = null): RuleFamily","description":"rules.randomRule","location":"ca_lib/rules/random-rule.html","searchKeys":["randomRule","fun randomRule(minRule: RuleFamily, maxRule: RuleFamily, seed: Int? = null): RuleFamily","rules.randomRule"]},{"name":"fun randomRules(minRule: RuleFamily, maxRule: RuleFamily, seed: Int? = null): Sequence<RuleFamily>","description":"rules.randomRules","location":"ca_lib/rules/random-rules.html","searchKeys":["randomRules","fun randomRules(minRule: RuleFamily, maxRule: RuleFamily, seed: Int? = null): Sequence<RuleFamily>","rules.randomRules"]},{"name":"fun ruleRange(phases: Array<Grid>): Pair<RuleFamily, RuleFamily>","description":"rules.ruleRange","location":"ca_lib/rules/rule-range.html","searchKeys":["ruleRange","fun ruleRange(phases: Array<Grid>): Pair<RuleFamily, RuleFamily>","rules.ruleRange"]},{"name":"fun ruleRange(phases: List<Grid>): Pair<RuleFamily, RuleFamily>","description":"rules.ruleRange","location":"ca_lib/rules/rule-range.html","searchKeys":["ruleRange","fun ruleRange(phases: List<Grid>): Pair<RuleFamily, RuleFamily>","rules.ruleRange"]},{"name":"fun ruletable(init: RuletableBuilder.() -> Unit): Ruletable","description":"rules.ruleloader.builders.ruletable","location":"ca_lib/rules.ruleloader.builders/ruletable.html","searchKeys":["ruletable","fun ruletable(init: RuletableBuilder.() -> Unit): Ruletable","rules.ruleloader.builders.ruletable"]},{"name":"fun saltire(range: Int): Array<Coordinate>","description":".saltire","location":"ca_lib/[root]/saltire.html","searchKeys":["saltire","fun saltire(range: Int): Array<Coordinate>",".saltire"]},{"name":"fun star(range: Int): Array<Coordinate>","description":".star","location":"ca_lib/[root]/star.html","searchKeys":["star","fun star(range: Int): Array<Coordinate>",".star"]},{"name":"fun table(numStates: Int = 2, neighbourhood: Array<Coordinate> = moore(1), symmetry: Symmetry? = null, init: RuletableDirectiveBuilder.() -> Unit)","description":"rules.ruleloader.builders.RuletableBuilder.table","location":"ca_lib/rules.ruleloader.builders/-ruletable-builder/table.html","searchKeys":["table","fun table(numStates: Int = 2, neighbourhood: Array<Coordinate> = moore(1), symmetry: Symmetry? = null, init: RuletableDirectiveBuilder.() -> Unit)","rules.ruleloader.builders.RuletableBuilder.table"]},{"name":"fun toCoordCA(neighbourhood: Array<Coordinate>): String","description":".toCoordCA","location":"ca_lib/[root]/to-coord-c-a.html","searchKeys":["toCoordCA","fun toCoordCA(neighbourhood: Array<Coordinate>): String",".toCoordCA"]},{"name":"fun toString(maxUsages: Int): String","description":"rules.ruleloader.ruletable.Variable.toString","location":"ca_lib/rules.ruleloader.ruletable/-variable/to-string.html","searchKeys":["toString","fun toString(maxUsages: Int): String","rules.ruleloader.ruletable.Variable.toString"]},{"name":"fun toSymbol(neighbourhood: Array<Coordinate>): Char?","description":".toSymbol","location":"ca_lib/[root]/to-symbol.html","searchKeys":["toSymbol","fun toSymbol(neighbourhood: Array<Coordinate>): Char?",".toSymbol"]},{"name":"fun toWeights(neighbourhood: Array<Coordinate>, weights: IntArray): String","description":".toWeights","location":"ca_lib/[root]/to-weights.html","searchKeys":["toWeights","fun toWeights(neighbourhood: Array<Coordinate>, weights: IntArray): String",".toWeights"]},{"name":"fun transition(transition: () -> Map<String, Int>)","description":"rules.ruleloader.builders.OuterTotalisticBuilder.transition","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/transition.html","searchKeys":["transition","fun transition(transition: () -> Map<String, Int>)","rules.ruleloader.builders.OuterTotalisticBuilder.transition"]},{"name":"fun transition(transitions: () -> String)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.transition","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/transition.html","searchKeys":["transition","fun transition(transitions: () -> String)","rules.ruleloader.builders.RuletableDirectiveBuilder.transition"]},{"name":"fun transition(var0: String = \"0\", var1: String = \"1\", transition: Int)","description":"rules.ruleloader.builders.OuterTotalisticBuilder.transition","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/transition.html","searchKeys":["transition","fun transition(var0: String = \"0\", var1: String = \"1\", transition: Int)","rules.ruleloader.builders.OuterTotalisticBuilder.transition"]},{"name":"fun transitions(transitions: () -> List<String>)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.transitions","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/transitions.html","searchKeys":["transitions","fun transitions(transitions: () -> List<String>)","rules.ruleloader.builders.RuletableDirectiveBuilder.transitions"]},{"name":"fun transitions(var0: String = \"0\", var1: String = \"1\", transitions: () -> Iterable<Int>)","description":"rules.ruleloader.builders.OuterTotalisticBuilder.transitions","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/transitions.html","searchKeys":["transitions","fun transitions(var0: String = \"0\", var1: String = \"1\", transitions: () -> Iterable<Int>)","rules.ruleloader.builders.OuterTotalisticBuilder.transitions"]},{"name":"fun tripod(range: Int): Array<Coordinate>","description":".tripod","location":"ca_lib/[root]/tripod.html","searchKeys":["tripod","fun tripod(range: Int): Array<Coordinate>",".tripod"]},{"name":"fun variable(name: String, states: () -> Iterable<Int>)","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.variable","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/variable.html","searchKeys":["variable","fun variable(name: String, states: () -> Iterable<Int>)","rules.ruleloader.builders.RuletableDirectiveBuilder.variable"]},{"name":"fun vonNeumann(range: Int): Array<Coordinate>","description":".vonNeumann","location":"ca_lib/[root]/von-neumann.html","searchKeys":["vonNeumann","fun vonNeumann(range: Int): Array<Coordinate>",".vonNeumann"]},{"name":"object Companion","description":".Utils.Companion","location":"ca_lib/[root]/-utils/-companion/index.html","searchKeys":["Companion","object Companion",".Utils.Companion"]},{"name":"object Companion","description":"rules.hrot.BaseHROT.Companion","location":"ca_lib/rules.hrot/-base-h-r-o-t/-companion/index.html","searchKeys":["Companion","object Companion","rules.hrot.BaseHROT.Companion"]},{"name":"open class Spaceship(dx: Int, dy: Int, period: Int, phases: Array<Grid>) : Pattern","description":"patterns.Spaceship","location":"ca_lib/patterns/-spaceship/index.html","searchKeys":["Spaceship","open class Spaceship(dx: Int, dy: Int, period: Int, phases: Array<Grid>) : Pattern","patterns.Spaceship"]},{"name":"open fun addApgcode(coordinate: Coordinate, apgcode: String)","description":"simulation.Grid.addApgcode","location":"ca_lib/simulation/-grid/add-apgcode.html","searchKeys":["addApgcode","open fun addApgcode(coordinate: Coordinate, apgcode: String)","simulation.Grid.addApgcode"]},{"name":"open fun addRLE(coordinate: Coordinate, rle: String)","description":"simulation.Grid.addRLE","location":"ca_lib/simulation/-grid/add-r-l-e.html","searchKeys":["addRLE","open fun addRLE(coordinate: Coordinate, rle: String)","simulation.Grid.addRLE"]},{"name":"open fun clear()","description":"simulation.Grid.clear","location":"ca_lib/simulation/-grid/clear.html","searchKeys":["clear","open fun clear()","simulation.Grid.clear"]},{"name":"open fun clear(startCoordinate: Coordinate, endCoordinate: Coordinate)","description":"simulation.Grid.clear","location":"ca_lib/simulation/-grid/clear.html","searchKeys":["clear","open fun clear(startCoordinate: Coordinate, endCoordinate: Coordinate)","simulation.Grid.clear"]},{"name":"open fun equals(other: Grid, dx: Int, dy: Int): Boolean","description":"simulation.Grid.equals","location":"ca_lib/simulation/-grid/equals.html","searchKeys":["equals","open fun equals(other: Grid, dx: Int, dy: Int): Boolean","simulation.Grid.equals"]},{"name":"open fun flip(flip: Flip): Grid","description":"simulation.Grid.flip","location":"ca_lib/simulation/-grid/flip.html","searchKeys":["flip","open fun flip(flip: Flip): Grid","simulation.Grid.flip"]},{"name":"open fun flip(startCoordinate: Coordinate, endCoordinate: Coordinate, flip: Flip): Grid","description":"simulation.Grid.flip","location":"ca_lib/simulation/-grid/flip.html","searchKeys":["flip","open fun flip(startCoordinate: Coordinate, endCoordinate: Coordinate, flip: Flip): Grid","simulation.Grid.flip"]},{"name":"open fun hashCode(startCoordinate: Coordinate, endCoordinate: Coordinate): Int","description":"simulation.Grid.hashCode","location":"ca_lib/simulation/-grid/hash-code.html","searchKeys":["hashCode","open fun hashCode(startCoordinate: Coordinate, endCoordinate: Coordinate): Int","simulation.Grid.hashCode"]},{"name":"open fun identify(maxGenerations: Int = 5000): Pattern?","description":"simulation.Grid.identify","location":"ca_lib/simulation/-grid/identify.html","searchKeys":["identify","open fun identify(maxGenerations: Int = 5000): Pattern?","simulation.Grid.identify"]},{"name":"open fun neighbours(): Set<Coordinate>","description":"simulation.Grid.neighbours","location":"ca_lib/simulation/-grid/neighbours.html","searchKeys":["neighbours","open fun neighbours(): Set<Coordinate>","simulation.Grid.neighbours"]},{"name":"open fun rotate(rotation: Rotation)","description":"simulation.Grid.rotate","location":"ca_lib/simulation/-grid/rotate.html","searchKeys":["rotate","open fun rotate(rotation: Rotation)","simulation.Grid.rotate"]},{"name":"open fun rotate(startCoordinate: Coordinate, endCoordinate: Coordinate, rotation: Rotation)","description":"simulation.Grid.rotate","location":"ca_lib/simulation/-grid/rotate.html","searchKeys":["rotate","open fun rotate(startCoordinate: Coordinate, endCoordinate: Coordinate, rotation: Rotation)","simulation.Grid.rotate"]},{"name":"open fun shift(dx: Int, dy: Int): Grid","description":"simulation.Grid.shift","location":"ca_lib/simulation/-grid/shift.html","searchKeys":["shift","open fun shift(dx: Int, dy: Int): Grid","simulation.Grid.shift"]},{"name":"open fun shift(startCoordinate: Coordinate, endCoordinate: Coordinate, dx: Int, dy: Int): Grid","description":"simulation.Grid.shift","location":"ca_lib/simulation/-grid/shift.html","searchKeys":["shift","open fun shift(startCoordinate: Coordinate, endCoordinate: Coordinate, dx: Int, dy: Int): Grid","simulation.Grid.shift"]},{"name":"open fun step(generations: Int = 1): Grid","description":"simulation.Grid.step","location":"ca_lib/simulation/-grid/step.html","searchKeys":["step","open fun step(generations: Int = 1): Grid","simulation.Grid.step"]},{"name":"open fun toApgcode(startCoordinate: Coordinate = bounds.first, endCoordinate: Coordinate = bounds.second): String","description":"simulation.Grid.toApgcode","location":"ca_lib/simulation/-grid/to-apgcode.html","searchKeys":["toApgcode","open fun toApgcode(startCoordinate: Coordinate = bounds.first, endCoordinate: Coordinate = bounds.second): String","simulation.Grid.toApgcode"]},{"name":"open fun toRLE(): String","description":"simulation.Grid.toRLE","location":"ca_lib/simulation/-grid/to-r-l-e.html","searchKeys":["toRLE","open fun toRLE(): String","simulation.Grid.toRLE"]},{"name":"open fun toRLE(startCoordinate: Coordinate, endCoordinate: Coordinate): String","description":"simulation.Grid.toRLE","location":"ca_lib/simulation/-grid/to-r-l-e.html","searchKeys":["toRLE","open fun toRLE(startCoordinate: Coordinate, endCoordinate: Coordinate): String","simulation.Grid.toRLE"]},{"name":"open fun updateBounds()","description":"simulation.Grid.updateBounds","location":"ca_lib/simulation/-grid/update-bounds.html","searchKeys":["updateBounds","open fun updateBounds()","simulation.Grid.updateBounds"]},{"name":"open operator fun get(x: Int, y: Int, withoutBg: Boolean = false): Int","description":"simulation.Grid.get","location":"ca_lib/simulation/-grid/get.html","searchKeys":["get","open operator fun get(x: Int, y: Int, withoutBg: Boolean = false): Int","simulation.Grid.get"]},{"name":"open operator fun get(xIntRange: IntRange, yIntRange: IntRange): Grid","description":"simulation.Grid.get","location":"ca_lib/simulation/-grid/get.html","searchKeys":["get","open operator fun get(xIntRange: IntRange, yIntRange: IntRange): Grid","simulation.Grid.get"]},{"name":"open operator fun invoke(dx: Int, dy: Int)","description":"simulation.Grid.invoke","location":"ca_lib/simulation/-grid/invoke.html","searchKeys":["invoke","open operator fun invoke(dx: Int, dy: Int)","simulation.Grid.invoke"]},{"name":"open operator fun invoke(flip: Flip)","description":"simulation.Grid.invoke","location":"ca_lib/simulation/-grid/invoke.html","searchKeys":["invoke","open operator fun invoke(flip: Flip)","simulation.Grid.invoke"]},{"name":"open operator fun invoke(rotation: Rotation)","description":"simulation.Grid.invoke","location":"ca_lib/simulation/-grid/invoke.html","searchKeys":["invoke","open operator fun invoke(rotation: Rotation)","simulation.Grid.invoke"]},{"name":"open operator fun set(coordinate: Coordinate, pattern: String)","description":"simulation.Grid.set","location":"ca_lib/simulation/-grid/set.html","searchKeys":["set","open operator fun set(coordinate: Coordinate, pattern: String)","simulation.Grid.set"]},{"name":"open operator fun set(x: Int, y: Int, state: Int)","description":"simulation.Grid.set","location":"ca_lib/simulation/-grid/set.html","searchKeys":["set","open operator fun set(x: Int, y: Int, state: Int)","simulation.Grid.set"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"patterns.Spaceship.equals","location":"ca_lib/patterns/-spaceship/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","patterns.Spaceship.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"simulation.Coordinate.equals","location":"ca_lib/simulation/-coordinate/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","simulation.Coordinate.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"simulation.Grid.equals","location":"ca_lib/simulation/-grid/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","simulation.Grid.equals"]},{"name":"open operator override fun get(coordinate: Coordinate, withoutBg: Boolean): Int","description":"simulation.DenseGrid.get","location":"ca_lib/simulation/-dense-grid/get.html","searchKeys":["get","open operator override fun get(coordinate: Coordinate, withoutBg: Boolean): Int","simulation.DenseGrid.get"]},{"name":"open operator override fun get(coordinate: Coordinate, withoutBg: Boolean): Int","description":"simulation.SparseGrid.get","location":"ca_lib/simulation/-sparse-grid/get.html","searchKeys":["get","open operator override fun get(coordinate: Coordinate, withoutBg: Boolean): Int","simulation.SparseGrid.get"]},{"name":"open operator override fun iterator(): MutableIterator<Pair<Coordinate, Int>>","description":"simulation.DenseGrid.iterator","location":"ca_lib/simulation/-dense-grid/iterator.html","searchKeys":["iterator","open operator override fun iterator(): MutableIterator<Pair<Coordinate, Int>>","simulation.DenseGrid.iterator"]},{"name":"open operator override fun iterator(): MutableIterator<Pair<Coordinate, Int>>","description":"simulation.SparseGrid.iterator","location":"ca_lib/simulation/-sparse-grid/iterator.html","searchKeys":["iterator","open operator override fun iterator(): MutableIterator<Pair<Coordinate, Int>>","simulation.SparseGrid.iterator"]},{"name":"open operator override fun set(coordinate: Coordinate, state: Int)","description":"simulation.DenseGrid.set","location":"ca_lib/simulation/-dense-grid/set.html","searchKeys":["set","open operator override fun set(coordinate: Coordinate, state: Int)","simulation.DenseGrid.set"]},{"name":"open operator override fun set(coordinate: Coordinate, state: Int)","description":"simulation.SparseGrid.set","location":"ca_lib/simulation/-sparse-grid/set.html","searchKeys":["set","open operator override fun set(coordinate: Coordinate, state: Int)","simulation.SparseGrid.set"]},{"name":"open override fun <T> applySymmetry(neighbours: List<T>): Set<List<T>>","description":"rules.ruleloader.ruletable.DisjointCyclesSymmetry.applySymmetry","location":"ca_lib/rules.ruleloader.ruletable/-disjoint-cycles-symmetry/apply-symmetry.html","searchKeys":["applySymmetry","open override fun <T> applySymmetry(neighbours: List<T>): Set<List<T>>","rules.ruleloader.ruletable.DisjointCyclesSymmetry.applySymmetry"]},{"name":"open override fun <T> applySymmetry(neighbours: List<T>): Set<List<T>>","description":"rules.ruleloader.ruletable.PermuteSymmetry.applySymmetry","location":"ca_lib/rules.ruleloader.ruletable/-permute-symmetry/apply-symmetry.html","searchKeys":["applySymmetry","open override fun <T> applySymmetry(neighbours: List<T>): Set<List<T>>","rules.ruleloader.ruletable.PermuteSymmetry.applySymmetry"]},{"name":"open override fun clear()","description":"simulation.SparseGrid.clear","location":"ca_lib/simulation/-sparse-grid/clear.html","searchKeys":["clear","open override fun clear()","simulation.SparseGrid.clear"]},{"name":"open override fun deepCopy(): DenseGrid","description":"simulation.DenseGrid.deepCopy","location":"ca_lib/simulation/-dense-grid/deep-copy.html","searchKeys":["deepCopy","open override fun deepCopy(): DenseGrid","simulation.DenseGrid.deepCopy"]},{"name":"open override fun deepCopy(): SparseGrid","description":"simulation.SparseGrid.deepCopy","location":"ca_lib/simulation/-sparse-grid/deep-copy.html","searchKeys":["deepCopy","open override fun deepCopy(): SparseGrid","simulation.SparseGrid.deepCopy"]},{"name":"open override fun export(): String","description":"rules.ruleloader.ruletable.RuletableDirective.export","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/export.html","searchKeys":["export","open override fun export(): String","rules.ruleloader.ruletable.RuletableDirective.export"]},{"name":"open override fun generateRuletable(): Ruletable","description":"rules.hrot.HROT.generateRuletable","location":"ca_lib/rules.hrot/-h-r-o-t/generate-ruletable.html","searchKeys":["generateRuletable","open override fun generateRuletable(): Ruletable","rules.hrot.HROT.generateRuletable"]},{"name":"open override fun generateRuletable(): Ruletable","description":"rules.hrot.HROTGenerations.generateRuletable","location":"ca_lib/rules.hrot/-h-r-o-t-generations/generate-ruletable.html","searchKeys":["generateRuletable","open override fun generateRuletable(): Ruletable","rules.hrot.HROTGenerations.generateRuletable"]},{"name":"open override fun hashCode(): Int","description":"patterns.Spaceship.hashCode","location":"ca_lib/patterns/-spaceship/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","patterns.Spaceship.hashCode"]},{"name":"open override fun hashCode(): Int","description":"simulation.Coordinate.hashCode","location":"ca_lib/simulation/-coordinate/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","simulation.Coordinate.hashCode"]},{"name":"open override fun hashCode(): Int","description":"simulation.Grid.hashCode","location":"ca_lib/simulation/-grid/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","simulation.Grid.hashCode"]},{"name":"open override fun toString(): String","description":"patterns.Oscillator.toString","location":"ca_lib/patterns/-oscillator/to-string.html","searchKeys":["toString","open override fun toString(): String","patterns.Oscillator.toString"]},{"name":"open override fun toString(): String","description":"patterns.Spaceship.toString","location":"ca_lib/patterns/-spaceship/to-string.html","searchKeys":["toString","open override fun toString(): String","patterns.Spaceship.toString"]},{"name":"open override fun toString(): String","description":"rules.RuleFamily.toString","location":"ca_lib/rules/-rule-family/to-string.html","searchKeys":["toString","open override fun toString(): String","rules.RuleFamily.toString"]},{"name":"open override fun toString(): String","description":"rules.ruleloader.Directive.toString","location":"ca_lib/rules.ruleloader/-directive/to-string.html","searchKeys":["toString","open override fun toString(): String","rules.ruleloader.Directive.toString"]},{"name":"open override fun toString(): String","description":"rules.ruleloader.Ruletable.toString","location":"ca_lib/rules.ruleloader/-ruletable/to-string.html","searchKeys":["toString","open override fun toString(): String","rules.ruleloader.Ruletable.toString"]},{"name":"open override fun toString(): String","description":"rules.ruleloader.ruletable.Transition.toString","location":"ca_lib/rules.ruleloader.ruletable/-transition/to-string.html","searchKeys":["toString","open override fun toString(): String","rules.ruleloader.ruletable.Transition.toString"]},{"name":"open override fun toString(): String","description":"rules.ruleloader.ruletable.Variable.toString","location":"ca_lib/rules.ruleloader.ruletable/-variable/to-string.html","searchKeys":["toString","open override fun toString(): String","rules.ruleloader.ruletable.Variable.toString"]},{"name":"open override fun toString(): String","description":"simulation.Coordinate.toString","location":"ca_lib/simulation/-coordinate/to-string.html","searchKeys":["toString","open override fun toString(): String","simulation.Coordinate.toString"]},{"name":"open override fun toString(): String","description":"simulation.Grid.toString","location":"ca_lib/simulation/-grid/to-string.html","searchKeys":["toString","open override fun toString(): String","simulation.Grid.toString"]},{"name":"open override fun transitionFunc(cells: IntArray, cellState: Int, generation: Int, coordinate: Coordinate): Int","description":"rules.hrot.HROT.transitionFunc","location":"ca_lib/rules.hrot/-h-r-o-t/transition-func.html","searchKeys":["transitionFunc","open override fun transitionFunc(cells: IntArray, cellState: Int, generation: Int, coordinate: Coordinate): Int","rules.hrot.HROT.transitionFunc"]},{"name":"open override fun transitionFunc(cells: IntArray, cellState: Int, generation: Int, coordinate: Coordinate): Int","description":"rules.hrot.HROTGenerations.transitionFunc","location":"ca_lib/rules.hrot/-h-r-o-t-generations/transition-func.html","searchKeys":["transitionFunc","open override fun transitionFunc(cells: IntArray, cellState: Int, generation: Int, coordinate: Coordinate): Int","rules.hrot.HROTGenerations.transitionFunc"]},{"name":"open override val alternatingPeriod: Int = 1","description":"rules.hrot.HROT.alternatingPeriod","location":"ca_lib/rules.hrot/-h-r-o-t/alternating-period.html","searchKeys":["alternatingPeriod","open override val alternatingPeriod: Int = 1","rules.hrot.HROT.alternatingPeriod"]},{"name":"open override val alternatingPeriod: Int = 1","description":"rules.hrot.HROTGenerations.alternatingPeriod","location":"ca_lib/rules.hrot/-h-r-o-t-generations/alternating-period.html","searchKeys":["alternatingPeriod","open override val alternatingPeriod: Int = 1","rules.hrot.HROTGenerations.alternatingPeriod"]},{"name":"open override val heat: IntArray","description":"patterns.Oscillator.heat","location":"ca_lib/patterns/-oscillator/heat.html","searchKeys":["heat","open override val heat: IntArray","patterns.Oscillator.heat"]},{"name":"open override val information: Map<String, String>","description":"patterns.Oscillator.information","location":"ca_lib/patterns/-oscillator/information.html","searchKeys":["information","open override val information: Map<String, String>","patterns.Oscillator.information"]},{"name":"open override val information: Map<String, String>","description":"patterns.Spaceship.information","location":"ca_lib/patterns/-spaceship/information.html","searchKeys":["information","open override val information: Map<String, String>","patterns.Spaceship.information"]},{"name":"open override val neighbourhood: Array<Array<Coordinate>>","description":"rules.hrot.HROT.neighbourhood","location":"ca_lib/rules.hrot/-h-r-o-t/neighbourhood.html","searchKeys":["neighbourhood","open override val neighbourhood: Array<Array<Coordinate>>","rules.hrot.HROT.neighbourhood"]},{"name":"open override val neighbourhood: Array<Array<Coordinate>>","description":"rules.hrot.HROTGenerations.neighbourhood","location":"ca_lib/rules.hrot/-h-r-o-t-generations/neighbourhood.html","searchKeys":["neighbourhood","open override val neighbourhood: Array<Array<Coordinate>>","rules.hrot.HROTGenerations.neighbourhood"]},{"name":"open override val numStates: Int","description":"rules.hrot.HROTGenerations.numStates","location":"ca_lib/rules.hrot/-h-r-o-t-generations/num-states.html","searchKeys":["numStates","open override val numStates: Int","rules.hrot.HROTGenerations.numStates"]},{"name":"open override val numStates: Int = 2","description":"rules.hrot.HROT.numStates","location":"ca_lib/rules.hrot/-h-r-o-t/num-states.html","searchKeys":["numStates","open override val numStates: Int = 2","rules.hrot.HROT.numStates"]},{"name":"open override val population: Int","description":"simulation.SparseGrid.population","location":"ca_lib/simulation/-sparse-grid/population.html","searchKeys":["population","open override val population: Int","simulation.SparseGrid.population"]},{"name":"open override val populationByState: IntArray","description":"simulation.DenseGrid.populationByState","location":"ca_lib/simulation/-dense-grid/population-by-state.html","searchKeys":["populationByState","open override val populationByState: IntArray","simulation.DenseGrid.populationByState"]},{"name":"open override val populationByState: IntArray","description":"simulation.SparseGrid.populationByState","location":"ca_lib/simulation/-sparse-grid/population-by-state.html","searchKeys":["populationByState","open override val populationByState: IntArray","simulation.SparseGrid.populationByState"]},{"name":"open override val populationList: List<Int>","description":"patterns.Oscillator.populationList","location":"ca_lib/patterns/-oscillator/population-list.html","searchKeys":["populationList","open override val populationList: List<Int>","patterns.Oscillator.populationList"]},{"name":"open override val populationListByState: List<IntArray>","description":"patterns.Oscillator.populationListByState","location":"ca_lib/patterns/-oscillator/population-list-by-state.html","searchKeys":["populationListByState","open override val populationListByState: List<IntArray>","patterns.Oscillator.populationListByState"]},{"name":"open override val possibleSuccessors: Array<Array<IntArray>>","description":"rules.hrot.HROT.possibleSuccessors","location":"ca_lib/rules.hrot/-h-r-o-t/possible-successors.html","searchKeys":["possibleSuccessors","open override val possibleSuccessors: Array<Array<IntArray>>","rules.hrot.HROT.possibleSuccessors"]},{"name":"open override val possibleSuccessors: Array<Array<IntArray>>","description":"rules.hrot.HROTGenerations.possibleSuccessors","location":"ca_lib/rules.hrot/-h-r-o-t-generations/possible-successors.html","searchKeys":["possibleSuccessors","open override val possibleSuccessors: Array<Array<IntArray>>","rules.hrot.HROTGenerations.possibleSuccessors"]},{"name":"open override val regex: List<Regex>","description":"rules.hrot.HROT.regex","location":"ca_lib/rules.hrot/-h-r-o-t/regex.html","searchKeys":["regex","open override val regex: List<Regex>","rules.hrot.HROT.regex"]},{"name":"open override val regex: List<Regex>","description":"rules.hrot.HROTGenerations.regex","location":"ca_lib/rules.hrot/-h-r-o-t-generations/regex.html","searchKeys":["regex","open override val regex: List<Regex>","rules.hrot.HROTGenerations.regex"]},{"name":"open override val ruleRange: Pair<Rule, Rule>?","description":"patterns.Spaceship.ruleRange","location":"ca_lib/patterns/-spaceship/rule-range.html","searchKeys":["ruleRange","open override val ruleRange: Pair<Rule, Rule>?","patterns.Spaceship.ruleRange"]},{"name":"open override val weights: IntArray?","description":"rules.hrot.HROT.weights","location":"ca_lib/rules.hrot/-h-r-o-t/weights.html","searchKeys":["weights","open override val weights: IntArray?","rules.hrot.HROT.weights"]},{"name":"open override val weights: IntArray?","description":"rules.hrot.HROTGenerations.weights","location":"ca_lib/rules.hrot/-h-r-o-t-generations/weights.html","searchKeys":["weights","open override val weights: IntArray?","rules.hrot.HROTGenerations.weights"]},{"name":"open override var population: Int = 0","description":"simulation.DenseGrid.population","location":"ca_lib/simulation/-dense-grid/population.html","searchKeys":["population","open override var population: Int = 0","simulation.DenseGrid.population"]},{"name":"open val alternatingPeriod: Int = 1","description":"rules.Rule.alternatingPeriod","location":"ca_lib/rules/-rule/alternating-period.html","searchKeys":["alternatingPeriod","open val alternatingPeriod: Int = 1","rules.Rule.alternatingPeriod"]},{"name":"open val background: IntArray","description":"rules.Rule.background","location":"ca_lib/rules/-rule/background.html","searchKeys":["background","open val background: IntArray","rules.Rule.background"]},{"name":"open val heat: IntArray","description":"patterns.Spaceship.heat","location":"ca_lib/patterns/-spaceship/heat.html","searchKeys":["heat","open val heat: IntArray","patterns.Spaceship.heat"]},{"name":"open val numStates: Int = 2","description":"rules.Rule.numStates","location":"ca_lib/rules/-rule/num-states.html","searchKeys":["numStates","open val numStates: Int = 2","rules.Rule.numStates"]},{"name":"open val populationList: List<Int>","description":"patterns.Spaceship.populationList","location":"ca_lib/patterns/-spaceship/population-list.html","searchKeys":["populationList","open val populationList: List<Int>","patterns.Spaceship.populationList"]},{"name":"open val populationListByState: List<IntArray>","description":"patterns.Spaceship.populationListByState","location":"ca_lib/patterns/-spaceship/population-list-by-state.html","searchKeys":["populationListByState","open val populationListByState: List<IntArray>","patterns.Spaceship.populationListByState"]},{"name":"open val ruleRange: Pair<Rule, Rule>? = null","description":"patterns.Pattern.ruleRange","location":"ca_lib/patterns/-pattern/rule-range.html","searchKeys":["ruleRange","open val ruleRange: Pair<Rule, Rule>? = null","patterns.Pattern.ruleRange"]},{"name":"open val summary: String","description":"patterns.Pattern.summary","location":"ca_lib/patterns/-pattern/summary.html","searchKeys":["summary","open val summary: String","patterns.Pattern.summary"]},{"name":"operator fun <T> invoke(neighbours: List<T>): Set<List<T>>","description":"rules.ruleloader.ruletable.Symmetry.invoke","location":"ca_lib/rules.ruleloader.ruletable/-symmetry/invoke.html","searchKeys":["invoke","operator fun <T> invoke(neighbours: List<T>): Set<List<T>>","rules.ruleloader.ruletable.Symmetry.invoke"]},{"name":"operator fun compareTo(other: Coordinate): Int","description":"simulation.Coordinate.compareTo","location":"ca_lib/simulation/-coordinate/compare-to.html","searchKeys":["compareTo","operator fun compareTo(other: Coordinate): Int","simulation.Coordinate.compareTo"]},{"name":"operator fun component1(): Int","description":"simulation.Coordinate.component1","location":"ca_lib/simulation/-coordinate/component1.html","searchKeys":["component1","operator fun component1(): Int","simulation.Coordinate.component1"]},{"name":"operator fun component2(): Int","description":"simulation.Coordinate.component2","location":"ca_lib/simulation/-coordinate/component2.html","searchKeys":["component2","operator fun component2(): Int","simulation.Coordinate.component2"]},{"name":"operator fun minus(other: Coordinate): Coordinate","description":"simulation.Coordinate.minus","location":"ca_lib/simulation/-coordinate/minus.html","searchKeys":["minus","operator fun minus(other: Coordinate): Coordinate","simulation.Coordinate.minus"]},{"name":"operator fun plus(other: Coordinate): Coordinate","description":"simulation.Coordinate.plus","location":"ca_lib/simulation/-coordinate/plus.html","searchKeys":["plus","operator fun plus(other: Coordinate): Coordinate","simulation.Coordinate.plus"]},{"name":"operator fun rangeTo(maxRule: RuleFamily): Sequence<RuleFamily>","description":"rules.RuleFamily.rangeTo","location":"ca_lib/rules/-rule-family/range-to.html","searchKeys":["rangeTo","operator fun rangeTo(maxRule: RuleFamily): Sequence<RuleFamily>","rules.RuleFamily.rangeTo"]},{"name":"operator fun unaryMinus(): Coordinate","description":"simulation.Coordinate.unaryMinus","location":"ca_lib/simulation/-coordinate/unary-minus.html","searchKeys":["unaryMinus","operator fun unaryMinus(): Coordinate","simulation.Coordinate.unaryMinus"]},{"name":"val activeCells: Int","description":"patterns.Oscillator.activeCells","location":"ca_lib/patterns/-oscillator/active-cells.html","searchKeys":["activeCells","val activeCells: Int","patterns.Oscillator.activeCells"]},{"name":"val birth: Set<Int>","description":"rules.hrot.HROT.birth","location":"ca_lib/rules.hrot/-h-r-o-t/birth.html","searchKeys":["birth","val birth: Set<Int>","rules.hrot.HROT.birth"]},{"name":"val birth: Set<Int>","description":"rules.hrot.HROTGenerations.birth","location":"ca_lib/rules.hrot/-h-r-o-t-generations/birth.html","searchKeys":["birth","val birth: Set<Int>","rules.hrot.HROTGenerations.birth"]},{"name":"val cellPeriods: Map<Coordinate, Int>","description":"patterns.Oscillator.cellPeriods","location":"ca_lib/patterns/-oscillator/cell-periods.html","searchKeys":["cellPeriods","val cellPeriods: Map<Coordinate, Int>","patterns.Oscillator.cellPeriods"]},{"name":"val comments: List<String?>","description":"rules.ruleloader.ruletable.RuletableDirective.comments","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/comments.html","searchKeys":["comments","val comments: List<String?>","rules.ruleloader.ruletable.RuletableDirective.comments"]},{"name":"val direction: String","description":"patterns.Spaceship.direction","location":"ca_lib/patterns/-spaceship/direction.html","searchKeys":["direction","val direction: String","patterns.Spaceship.direction"]},{"name":"val directive: List<Directive>","description":"rules.ruleloader.Ruletable.directive","location":"ca_lib/rules.ruleloader/-ruletable/directive.html","searchKeys":["directive","val directive: List<Directive>","rules.ruleloader.Ruletable.directive"]},{"name":"val disjointCycles: Array<Array<IntArray>>","description":"rules.ruleloader.ruletable.DisjointCyclesSymmetry.disjointCycles","location":"ca_lib/rules.ruleloader.ruletable/-disjoint-cycles-symmetry/disjoint-cycles.html","searchKeys":["disjointCycles","val disjointCycles: Array<Array<IntArray>>","rules.ruleloader.ruletable.DisjointCyclesSymmetry.disjointCycles"]},{"name":"val dx: Int","description":"patterns.Spaceship.dx","location":"ca_lib/patterns/-spaceship/dx.html","searchKeys":["dx","val dx: Int","patterns.Spaceship.dx"]},{"name":"val dy: Int","description":"patterns.Spaceship.dy","location":"ca_lib/patterns/-spaceship/dy.html","searchKeys":["dy","val dy: Int","patterns.Spaceship.dy"]},{"name":"val expansion_factor: Double = 1.1","description":"simulation.DenseGrid.expansion_factor","location":"ca_lib/simulation/-dense-grid/expansion_factor.html","searchKeys":["expansion_factor","val expansion_factor: Double = 1.1","simulation.DenseGrid.expansion_factor"]},{"name":"val name: String","description":"rules.ruleloader.Directive.name","location":"ca_lib/rules.ruleloader/-directive/name.html","searchKeys":["name","val name: String","rules.ruleloader.Directive.name"]},{"name":"val name: String","description":"rules.ruleloader.Ruletable.name","location":"ca_lib/rules.ruleloader/-ruletable/name.html","searchKeys":["name","val name: String","rules.ruleloader.Ruletable.name"]},{"name":"val name: String","description":"rules.ruleloader.ruletable.Variable.name","location":"ca_lib/rules.ruleloader.ruletable/-variable/name.html","searchKeys":["name","val name: String","rules.ruleloader.ruletable.Variable.name"]},{"name":"val neighbourhood: Array<Coordinate>","description":"rules.ruleloader.builders.OuterTotalisticBuilder.neighbourhood","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/neighbourhood.html","searchKeys":["neighbourhood","val neighbourhood: Array<Coordinate>","rules.ruleloader.builders.OuterTotalisticBuilder.neighbourhood"]},{"name":"val neighbourhood: Array<Coordinate>","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.neighbourhood","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/neighbourhood.html","searchKeys":["neighbourhood","val neighbourhood: Array<Coordinate>","rules.ruleloader.builders.RuletableDirectiveBuilder.neighbourhood"]},{"name":"val neighbourhood: Array<Coordinate>","description":"simulation.Grid.neighbourhood","location":"ca_lib/simulation/-grid/neighbourhood.html","searchKeys":["neighbourhood","val neighbourhood: Array<Coordinate>","simulation.Grid.neighbourhood"]},{"name":"val nonTrivial: Boolean","description":"patterns.Oscillator.nonTrivial","location":"ca_lib/patterns/-oscillator/non-trivial.html","searchKeys":["nonTrivial","val nonTrivial: Boolean","patterns.Oscillator.nonTrivial"]},{"name":"val numStates: Int = 2","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.numStates","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/num-states.html","searchKeys":["numStates","val numStates: Int = 2","rules.ruleloader.builders.RuletableDirectiveBuilder.numStates"]},{"name":"val numStates: Int = 2","description":"rules.ruleloader.ruletable.RuletableDirective.numStates","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/num-states.html","searchKeys":["numStates","val numStates: Int = 2","rules.ruleloader.ruletable.RuletableDirective.numStates"]},{"name":"val period: Int","description":"patterns.Spaceship.period","location":"ca_lib/patterns/-spaceship/period.html","searchKeys":["period","val period: Int","patterns.Spaceship.period"]},{"name":"val phases: Array<Grid>","description":"patterns.Spaceship.phases","location":"ca_lib/patterns/-spaceship/phases.html","searchKeys":["phases","val phases: Array<Grid>","patterns.Spaceship.phases"]},{"name":"val rotorCells: Int","description":"patterns.Oscillator.rotorCells","location":"ca_lib/patterns/-oscillator/rotor-cells.html","searchKeys":["rotorCells","val rotorCells: Int","patterns.Oscillator.rotorCells"]},{"name":"val rule: Rule","description":"patterns.Spaceship.rule","location":"ca_lib/patterns/-spaceship/rule.html","searchKeys":["rule","val rule: Rule","patterns.Spaceship.rule"]},{"name":"val ruleDirectives: List<RuleDirective>","description":"rules.ruleloader.Ruletable.ruleDirectives","location":"ca_lib/rules.ruleloader/-ruletable/rule-directives.html","searchKeys":["ruleDirectives","val ruleDirectives: List<RuleDirective>","rules.ruleloader.Ruletable.ruleDirectives"]},{"name":"val rulestring: String","description":"rules.RuleFamily.rulestring","location":"ca_lib/rules/-rule-family/rulestring.html","searchKeys":["rulestring","val rulestring: String","rules.RuleFamily.rulestring"]},{"name":"val size: Int","description":"rules.ruleloader.ruletable.Transition.size","location":"ca_lib/rules.ruleloader.ruletable/-transition/size.html","searchKeys":["size","val size: Int","rules.ruleloader.ruletable.Transition.size"]},{"name":"val speed: String","description":"patterns.Spaceship.speed","location":"ca_lib/patterns/-spaceship/speed.html","searchKeys":["speed","val speed: String","patterns.Spaceship.speed"]},{"name":"val statorCells: Int","description":"patterns.Oscillator.statorCells","location":"ca_lib/patterns/-oscillator/stator-cells.html","searchKeys":["statorCells","val statorCells: Int","patterns.Oscillator.statorCells"]},{"name":"val strictVolatility: Double","description":"patterns.Oscillator.strictVolatility","location":"ca_lib/patterns/-oscillator/strict-volatility.html","searchKeys":["strictVolatility","val strictVolatility: Double","patterns.Oscillator.strictVolatility"]},{"name":"val survival: Set<Int>","description":"rules.hrot.HROT.survival","location":"ca_lib/rules.hrot/-h-r-o-t/survival.html","searchKeys":["survival","val survival: Set<Int>","rules.hrot.HROT.survival"]},{"name":"val survival: Set<Int>","description":"rules.hrot.HROTGenerations.survival","location":"ca_lib/rules.hrot/-h-r-o-t-generations/survival.html","searchKeys":["survival","val survival: Set<Int>","rules.hrot.HROTGenerations.survival"]},{"name":"val symmetry: Symmetry? = null","description":"rules.ruleloader.builders.RuletableDirectiveBuilder.symmetry","location":"ca_lib/rules.ruleloader.builders/-ruletable-directive-builder/symmetry.html","searchKeys":["symmetry","val symmetry: Symmetry? = null","rules.ruleloader.builders.RuletableDirectiveBuilder.symmetry"]},{"name":"val temperature: List<Double>","description":"patterns.Oscillator.temperature","location":"ca_lib/patterns/-oscillator/temperature.html","searchKeys":["temperature","val temperature: List<Double>","patterns.Oscillator.temperature"]},{"name":"val transitions: List<Transition?>","description":"rules.ruleloader.ruletable.RuletableDirective.transitions","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/transitions.html","searchKeys":["transitions","val transitions: List<Transition?>","rules.ruleloader.ruletable.RuletableDirective.transitions"]},{"name":"val unbounded: Boolean = true","description":"rules.ruleloader.ruletable.Variable.unbounded","location":"ca_lib/rules.ruleloader.ruletable/-variable/unbounded.html","searchKeys":["unbounded","val unbounded: Boolean = true","rules.ruleloader.ruletable.Variable.unbounded"]},{"name":"val values: Map<Int, Int>","description":"rules.ruleloader.ruletable.Transition.values","location":"ca_lib/rules.ruleloader.ruletable/-transition/values.html","searchKeys":["values","val values: Map<Int, Int>","rules.ruleloader.ruletable.Transition.values"]},{"name":"val values: Set<Int>","description":"rules.ruleloader.ruletable.Variable.values","location":"ca_lib/rules.ruleloader.ruletable/-variable/values.html","searchKeys":["values","val values: Set<Int>","rules.ruleloader.ruletable.Variable.values"]},{"name":"val variables: List<Variable?>","description":"rules.ruleloader.ruletable.RuletableDirective.variables","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/variables.html","searchKeys":["variables","val variables: List<Variable?>","rules.ruleloader.ruletable.RuletableDirective.variables"]},{"name":"val variables: Map<Int, Variable>","description":"rules.ruleloader.ruletable.Transition.variables","location":"ca_lib/rules.ruleloader.ruletable/-transition/variables.html","searchKeys":["variables","val variables: Map<Int, Variable>","rules.ruleloader.ruletable.Transition.variables"]},{"name":"val volatility: Double","description":"patterns.Oscillator.volatility","location":"ca_lib/patterns/-oscillator/volatility.html","searchKeys":["volatility","val volatility: Double","patterns.Oscillator.volatility"]},{"name":"val x: Int = 0","description":"simulation.Coordinate.x","location":"ca_lib/simulation/-coordinate/x.html","searchKeys":["x","val x: Int = 0","simulation.Coordinate.x"]},{"name":"val y: Int = 0","description":"simulation.Coordinate.y","location":"ca_lib/simulation/-coordinate/y.html","searchKeys":["y","val y: Int = 0","simulation.Coordinate.y"]},{"name":"var background: Int = 0","description":"simulation.Grid.background","location":"ca_lib/simulation/-grid/background.html","searchKeys":["background","var background: Int = 0","simulation.Grid.background"]},{"name":"var bounds: Pair<Coordinate, Coordinate>","description":"simulation.Grid.bounds","location":"ca_lib/simulation/-grid/bounds.html","searchKeys":["bounds","var bounds: Pair<Coordinate, Coordinate>","simulation.Grid.bounds"]},{"name":"var generation: Int = 0","description":"simulation.Grid.generation","location":"ca_lib/simulation/-grid/generation.html","searchKeys":["generation","var generation: Int = 0","simulation.Grid.generation"]},{"name":"var input: String","description":"rules.ruleloader.builders.OuterTotalisticBuilder.input","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/input.html","searchKeys":["input","var input: String","rules.ruleloader.builders.OuterTotalisticBuilder.input"]},{"name":"var name: String","description":"rules.ruleloader.builders.RuletableBuilder.name","location":"ca_lib/rules.ruleloader.builders/-ruletable-builder/name.html","searchKeys":["name","var name: String","rules.ruleloader.builders.RuletableBuilder.name"]},{"name":"var neighbourhood: Array<Coordinate>","description":"rules.ruleloader.ruletable.RuletableDirective.neighbourhood","location":"ca_lib/rules.ruleloader.ruletable/-ruletable-directive/neighbourhood.html","searchKeys":["neighbourhood","var neighbourhood: Array<Coordinate>","rules.ruleloader.ruletable.RuletableDirective.neighbourhood"]},{"name":"var output: String","description":"rules.ruleloader.builders.OuterTotalisticBuilder.output","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/output.html","searchKeys":["output","var output: String","rules.ruleloader.builders.OuterTotalisticBuilder.output"]},{"name":"var rule: Rule","description":"simulation.Grid.rule","location":"ca_lib/simulation/-grid/rule.html","searchKeys":["rule","var rule: Rule","simulation.Grid.rule"]},{"name":"var startingCoordinate: Coordinate","description":"simulation.DenseGrid.startingCoordinate","location":"ca_lib/simulation/-dense-grid/starting-coordinate.html","searchKeys":["startingCoordinate","var startingCoordinate: Coordinate","simulation.DenseGrid.startingCoordinate"]},{"name":"var weights: IntArray? = null","description":"rules.ruleloader.builders.OuterTotalisticBuilder.weights","location":"ca_lib/rules.ruleloader.builders/-outer-totalistic-builder/weights.html","searchKeys":["weights","var weights: IntArray? = null","rules.ruleloader.builders.OuterTotalisticBuilder.weights"]}]
